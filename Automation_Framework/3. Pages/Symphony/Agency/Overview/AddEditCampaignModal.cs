using System;
using System.Linq;
using System.Text;
using Automation_Framework.DataModels.WorkflowTestData.Campaign;
using Automation_Framework.Hooks;
using OpenQA.Selenium;
using TechTalk.SpecFlow;

namespace Automation_Framework._3._Pages.Symphony.Agency.Overview
{
    public class AddEditCampaignModal : BasePage
    {
        // Tab Navigation Links
        private IWebElement _lnkDetailsTab => FindElementById("add-and-edit-tabs-tab-1");
        private IWebElement _lnkExchangeRatesTab => FindElementById("add-and-edit-tabs-tab-2");
        private IWebElement _lnkBudgetTab => FindElementById("add-and-edit-tabs-tab-3");
        private IWebElement _lnkStrategyTab => FindElementById("add-and-edit-tabs-tab-4");

        // Common Links
        private IWebElement _btnSave => FindElementByCssSelector(".aui--button.btn.btn-primary div");
        
        // Details Tab Links
        private IWebElement _txtCampaignName => FindElementById("campaignName");
        private IWebElement _txtInternalId => FindElementById("campaignInternalId");
        private IWebElement _chkIsAutoGeneratedName => FindElementByXPath("//*[@id='isAutoGeneratedName']/..//div[@class='checkbox-component-icon']");
        private IWebElement _chkAddToWatchlist => FindElementByXPath("//*[@id='addtoWatchlist']/..//div[@class='checkbox-component-icon']");
        private IWebElement _txtCampaignDescription => FindElementById("campaignDescription");
        private IWebElement _txtStartDate => FindElementById("startDate");
        private IWebElement _txtEndDate => FindElementById("endDate");
        private IWebElement _txtTimingComment => FindElementById("timingComment");
        private IWebElement _ddlAgencyContact => FindElementByXPath("//label[text() = 'Agency']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlCreativeContact => FindElementByXPath("//label[text() = 'Creative']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlClient => FindElementByXPath("//label[text() = 'Client']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlProduct => FindElementByXPath("//label[text() = 'Product']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlThirdPartyAdServer => FindElementByXPath("//label[text() = '3rd Party Ad Server']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _chkExportMediaCostToAdserver => FindElementByXPath("//*[@id='exportCostToAdServer']/..//div");
        private IWebElement _ddlFourthPartyTracking => FindElementByXPath("(//label[text() = '4th Party Tracking']/..//div[contains(@class,'select-component__control')])[2]");
        private IWebElement _chkTraffickingPlacementLevelLandingPage => FindElementByXPath("//*[@id='traffickingPlacementLandingPage']/..//div");
        private IWebElement _rdoCostOfTrackingModelRate => FindElementByXPath("//*[@id='rateTrackingModel']/..//span");
        private IWebElement _rdoCostOfTrackingModelCost => FindElementByXPath("//*[@id='costTrackingModel']/..//span");
        private IWebElement _txtLandingPage => FindElementById("landingPage");
        private IWebElement _ddlParentCampaign => FindElementByXPath("//label[text() = 'Parent Campaign']/..//div[contains(@class,'select-component__control')]");

        // Strategy Tab Links
        private IWebElement _txtObjectiveSummary => FindElementById("objectiveSummary");
        private IWebElement _txtObjectiveOne => FindElementById("objective1");
        private IWebElement _txtObjectiveTwo => FindElementById("objective2");
        private IWebElement _txtObjectiveThree => FindElementById("objective3");
        private IWebElement _chkGenderMale => FindElementByXPath("//*[@id='male']/..//div");
        private IWebElement _chkGenderFemale => FindElementByXPath("//*[@id='female']/..//div");
        private IWebElement _ddlAge => FindElementByXPath("//label[text() = 'Age']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtTargetDemographicComment => FindElementById("targetDemographicComment");
        private IWebElement _ddlOtherMedia => FindElementByXPath("//label[text() = 'Other Media']/../..//div[contains(@class,'select-component__control')]");

        public AddEditCampaignModal(IWebDriver driver, FeatureContext featureContext) : base(driver, featureContext)
        {
        }

        public void CreateCampaign(CampaignData campaignData)
        {
            EnsureMandatoryValuesAreProvided(campaignData);

            SetCampaignDetailsTabData(campaignData.DetailsData);
            SetCampaignExchangeRatesTabData(campaignData.ExchangeRatesData);
            SetCampaignBudgetTabData(campaignData.BudgetData);
            SetCampaignStrategyTabData(campaignData.StrategyData);

            ClickElement(_btnSave);

            SwitchToDefaultContent();
        }

        private void SetCampaignDetailsTabData(CampaignDetailsData campaignDetailsData)
        {
            SetReactCheckBoxState(_chkIsAutoGeneratedName, campaignDetailsData.AutoGenerateName);
            
            if (!campaignDetailsData.AutoGenerateName)
            {
                campaignDetailsData.CampaignName = $"{campaignDetailsData.CampaignName} {DateTime.Now.ToString("yyyyMMdd HHmm")}";
                FeatureContext[ContextStrings.CampaignName] = campaignDetailsData.CampaignName;
                ClearInputAndTypeValue(_txtCampaignName, campaignDetailsData.CampaignName);
            }

            ClearInputAndTypeValueIfRequired(_txtInternalId, campaignDetailsData.InternalId);
            SetReactCheckBoxState(_chkAddToWatchlist, campaignDetailsData.AddToWatchlist);
            ClearInputAndTypeValueIfRequired(_txtCampaignDescription, campaignDetailsData.Description);

            if (string.IsNullOrWhiteSpace(campaignDetailsData.StartDate))
            {
                campaignDetailsData.StartDate = GetTodaysDate();
            }

            if (string.IsNullOrWhiteSpace(campaignDetailsData.EndDate))
            {
                campaignDetailsData.EndDate = GetFutureDate(campaignDetailsData.StartDate, 3);
            }

            FeatureContext[ContextStrings.CampaignStartDate] = FormatDate(campaignDetailsData.StartDate, "dd/MM/yyyy");
            FeatureContext[ContextStrings.CampaignEndDate] = FormatDate(campaignDetailsData.EndDate, "dd/MM/yyyy");

            EnterDate(_txtStartDate, campaignDetailsData.StartDate);
            EnterDate(_txtEndDate, campaignDetailsData.EndDate);
            ClearInputAndTypeValueIfRequired(_txtTimingComment, campaignDetailsData.TimingComment);
            SelectSingleValueFromReactDropdownByText(_ddlAgencyContact, campaignDetailsData.AgencyContact);

            if (!string.IsNullOrWhiteSpace(campaignDetailsData.CreativeContact))
            {
                SelectSingleValueFromReactDropdownByText(_ddlCreativeContact, campaignDetailsData.CreativeContact);
            }

            SelectSingleValueFromReactDropdownByText(_ddlClient, campaignDetailsData.ClientName);
            SelectSingleValueFromReactDropdownByText(_ddlProduct, campaignDetailsData.Product);

            if (!string.IsNullOrWhiteSpace(campaignDetailsData.ParentCampaign))
            {
                SelectSingleValueFromReactDropdownByText(_ddlParentCampaign, campaignDetailsData.ParentCampaign);
            }

            SelectSingleValueFromReactDropdownByText(_ddlThirdPartyAdServer, campaignDetailsData.ThirdPartyAdserver);
            SetReactCheckBoxState(_chkExportMediaCostToAdserver, campaignDetailsData.ExportMediaCostInformationToAdserver);
            SelectSingleValueFromReactDropdownByText(_ddlFourthPartyTracking, campaignDetailsData.FourthPartyAdserver);
            SetReactCheckBoxState(_chkTraffickingPlacementLevelLandingPage, campaignDetailsData.TraffickingPlacementLevelLandingPage);
            ClickElement(campaignDetailsData.IsCostOfTrackingRate ? _rdoCostOfTrackingModelRate : _rdoCostOfTrackingModelCost);
            ClearInputAndTypeValueIfRequired(_txtLandingPage, campaignDetailsData.LandingPage);

            if (campaignDetailsData.CustomFields != null && campaignDetailsData.CustomFields.Any())
            {
                foreach (var customFieldData in campaignDetailsData.CustomFields)
                {
                    var customFieldElement = FindElementByXPath($"//label[text() = '{customFieldData.Name}']");
                    SetCustomFieldElement(customFieldElement, customFieldData.Type, customFieldData.Values);
                }
            }
        }

        private void SetCampaignExchangeRatesTabData(CampaignExchangeRatesData campaignExchangeRatesData)
        {
            if (campaignExchangeRatesData?.ExchangeRateData == null || !campaignExchangeRatesData.ExchangeRateData.Any())
                return;

            SwitchToTab(_lnkExchangeRatesTab);

            //TODO - This will not currently support multiple exchange rates for the same Country
            foreach (var exchangeRatedata in campaignExchangeRatesData.ExchangeRateData)
            {
                var countryBaseCurrencyDropdownXpath = $"(//div[@class = 'campaign-exchange-rates']//div[text() = '{exchangeRatedata.Country}']/../..//div[contains(@class,'select-component')])[1]";
                var countryBaseCurrencyDropdown = FindElementByXPath(countryBaseCurrencyDropdownXpath);
                SelectSingleValueFromReactDropdownByText(countryBaseCurrencyDropdown, exchangeRatedata.BaseCurrency);

                var countryExchangeCurrencyDropdownXpath = $"(//div[@class = 'campaign-exchange-rates']//div[text() = '{exchangeRatedata.Country}']/../..//div[contains(@class,'select-component')])[7]";
                var countryExchangeCurrencyDropdown = FindElementByXPath(countryExchangeCurrencyDropdownXpath);
                SelectSingleValueFromReactDropdownByText(countryExchangeCurrencyDropdown, exchangeRatedata.ExchangeCurrency);

                var countryRateField = FindElementByXPath($"(//div[@class = 'campaign-exchange-rates']//div[text() = '{exchangeRatedata.Country}']/../..//input)[3]");
                ClearInputAndTypeValue(countryRateField, exchangeRatedata.Rate);
            }
        }

        private void SetCampaignBudgetTabData(CampaignBudgetData campaignBudgetData)
        {
            if (campaignBudgetData?.BudgetData == null || !campaignBudgetData.BudgetData.Any())
                return;

            SwitchToTab(_lnkBudgetTab);

            //TODO - This will not currently support multiple bugets for the same Country
            foreach (var budgetData in campaignBudgetData.BudgetData)
            {
                var countryPurchaseOrderNumberField = FindElementByXPath($"//div[@class = 'campaign-budgets']//div[text() = '{budgetData.Country}']/../../..//input[@placeholder='Purchase Order']");
                ClearInputAndTypeValue(countryPurchaseOrderNumberField, budgetData.PurchaseOrder);

                var countryCurrencyDropdownXpath = $"(//div[@class = 'campaign-budgets']//div[text() = '{budgetData.Country}']/../../..//div[contains(@class,'select-component__control')])[1]";
                var countryCurrencyDropdown = FindElementByXPath(countryCurrencyDropdownXpath);
                SelectSingleValueFromReactDropdownByText(countryCurrencyDropdown, budgetData.Currency);

                var countryOnlineMediaBudgetField = FindElementByXPath($"(//div[@class = 'campaign-budgets']//div[text() = '{budgetData.Country}']/../../..//input)[3]");
                ClearInputAndTypeValue(countryOnlineMediaBudgetField, budgetData.OnlineMediaBudget);
            }
        }

        private void SetCampaignStrategyTabData(CampaignStrategyData campaignStrategyData)
        {
            if (campaignStrategyData == null)
                return;

            SwitchToTab(_lnkStrategyTab);
            ClearInputAndTypeValueIfRequired(_txtObjectiveSummary, campaignStrategyData.ObjectiveSummary);
            ClearInputAndTypeValueIfRequired(_txtObjectiveOne, campaignStrategyData.ObjectiveOne);
            ClearInputAndTypeValueIfRequired(_txtObjectiveTwo, campaignStrategyData.ObjectiveTwo);
            ClearInputAndTypeValueIfRequired(_txtObjectiveThree, campaignStrategyData.ObjectiveThree);
            ClickElement(campaignStrategyData.IsGenderMale ? _chkGenderMale : _chkGenderFemale);

            if (campaignStrategyData.Age != null || campaignStrategyData.Age.Any())
            {
                SelectMultipleValuesFromReactDropdownByText(_ddlAge, campaignStrategyData.Age);
            }

            ClearInputAndTypeValueIfRequired(_txtTargetDemographicComment, campaignStrategyData.TargetDemographicComment);
            
            if (campaignStrategyData.Age != null || campaignStrategyData.OtherMedia.Any())
            {
                SelectMultipleValuesFromReactDropdownByText(_ddlOtherMedia, campaignStrategyData.OtherMedia);
            }
        }

        private void SwitchToTab(IWebElement tabToSwitchTo)
        {
            ClickElement(tabToSwitchTo);
        }

        private void EnsureMandatoryValuesAreProvided(CampaignData campaignData)
        {
            var dataErrorFound = false;
            var campaignDataErrors = new StringBuilder();
            campaignDataErrors.Append("The feature file " + FeatureContext.FeatureInfo.Title + " has the following data issues:");

            if (string.IsNullOrWhiteSpace(campaignData.DetailsData.CampaignName) && !campaignData.DetailsData.AutoGenerateName)
            {
                dataErrorFound = true;
                campaignDataErrors.Append("\n- Campaign name not set and IsAutoGenerateName was false");
            }

            if (string.IsNullOrWhiteSpace(campaignData.DetailsData.AgencyContact))
            {
                dataErrorFound = true;
                campaignDataErrors.Append("\n- AgencyContact was not set");
            }

            if (string.IsNullOrWhiteSpace(campaignData.DetailsData.ClientName))
            {
                dataErrorFound = true;
                campaignDataErrors.Append("\n- ClientName was not set");
            }

            if (string.IsNullOrWhiteSpace(campaignData.DetailsData.Product))
            {
                dataErrorFound = true;
                campaignDataErrors.Append("\n- Product was not set");
            }

            if (dataErrorFound)
                throw new ArgumentException(campaignDataErrors.ToString());
        }
    }
}