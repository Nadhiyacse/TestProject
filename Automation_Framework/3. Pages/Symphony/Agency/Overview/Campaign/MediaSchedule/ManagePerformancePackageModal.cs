using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Automation_Framework._3._Pages.Symphony.Common.Enums;
using Automation_Framework.DataModels.WorkflowTestData.MediaScheduleItem.Common;
using Automation_Framework.DataModels.WorkflowTestData.MediaScheduleItem.PerformancePackage;
using OpenQA.Selenium;
using TechTalk.SpecFlow;

namespace Automation_Framework._3._Pages.Symphony.Agency.Overview.Campaign.MediaSchedule
{
    public class ManagePerformancePackageModal : AddEditModal
    {
        // Detail Tab Links
        private IWebElement _txtPackageName => FindElementById("packageName");
        private IWebElement _chkIsAutoGeneratedPackageName => FindElementByXPath("//*[@id='autoGenerateName']/..//div");
        private IWebElement _ddlPublisher => FindElementByXPath("//label[text() = 'Publisher']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlSite => FindElementByXPath("//label[text() = 'Site']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlSupplier => FindElementByXPath("//label[text() = 'Supplier']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtGoal => FindElementByXPath($"//*[contains(text(),'Goal')]/following-sibling::input");
        private IWebElement _txtFrequencyCapImpressions => FindElementById("frequencyCapValue");
        private IWebElement _txtFrequencyCapDuration => FindElementById("frequencyCapIntervalValue");
        private IWebElement _ddlFrequencyCapInterval => FindElementByXPath("//label[text() = 'Impressions Per']/../../..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtStartDate => FindElementByXPath("//*[text() = 'Start']/..//input");
        private IWebElement _txtEndDate => FindElementByXPath("//*[text() = 'End']/..//input");
        private IWebElement _ddlClientAgreement => FindElementByXPath("//div[@id='AgencyFeeAgreementField']//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlCurrency => FindElementByXPath("//label[text() = 'Currency']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtExchangeRate => FindElementByXPath("//*[contains(text(), 'Exchange Rate')]/following-sibling::input");
        private IWebElement _txtSOV => FindElementByXPath("//*[contains(text(), 'SOV')]/following-sibling::input");
        private IWebElement _ddlPurchaseType => FindElementByXPath("//label[text() = 'Type']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtGeneralComments => FindElementById("comment");

        // Placement Tab Links
        private IWebElement _tabPlacements => FindElementByXPath("//li[contains(@class, 'placement-tab')]//a");
        private IWebElement _btnAddPlacement => FindElementById("addPlacementButton");
        private IWebElement _btnSavePlacement => FindElementById("savePlacementButton");
        private IWebElement _txtPlacementName => FindElementByXPath("//*[text()='Auto generate placement names']/../../../input");
        private IWebElement _chkIsAutoGeneratedPlacementName => FindElementByXPath("//*[text()='Auto generate placement names']/../div[@class='checkbox-component-icon']");
        private IWebElement _ddlLocation => FindElementByXPath("//label[text() = 'Location']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlFormat => FindElementByXPath("//label[text() = 'Format']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlCreativeType => FindElementByXPath("//label[text() = 'Creative Type']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlPackage => FindElementByXPath("//label[text() = 'Package']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlDevices => FindElementByXPath("//label[text() = 'Devices']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtLandingPage => FindElementByXPath("//*[text() = 'Landing page']/following-sibling::input");

        public ManagePerformancePackageModal(IWebDriver driver, FeatureContext featureContext) : base(driver, featureContext)
        {
        }

        public void CreatePerformancePackage(PerformancePackage performancePackage)
        {
            WaitForLoaderSpinnerToDisappear();
            if (performancePackage.IsAutomatedGuaranteedItem)
            {
                EnsureMandatoryValueForAGPackage(performancePackage);
                SetDetailTabDataForAg(performancePackage.DetailTabData);
            }
            else
            {
                EnsureMandatoryValuesAreProvided(performancePackage);
                SetDetailTabData(performancePackage.DetailTabData);
            }
            SetPlacementsTabData(performancePackage.PlacementsTabData);
            SetClassificationTabData(performancePackage.ClassificationsTabData);
            SetFlightingTabData(performancePackage.FlightingTabData);
            SetTrafficTabData(performancePackage.TrafficTabData);
            SetCostTabData(performancePackage.CostsTabData);
            SetForecastTabData(performancePackage.ForecastTabData);
            SetMoreTabData(performancePackage.MoreTabData);

            var purchaseType = ConvertToPurchaseTypeEnum(performancePackage.DetailTabData.PurchaseType);
            AddItem(performancePackage.IsAutomatedGuaranteedItem, purchaseType);

            WaitUntilAlertContains("All Done!");
        }

        private void SetDetailTabDataForAg(DetailTabData detailTabData)
        {
            ValidateAutoCalculatedField(detailTabData);
        }

        private void SetDetailTabData(DetailTabData detailTabData)
        {
            ClickTab("Details");

            SetReactCheckBoxState(_chkIsAutoGeneratedPackageName, detailTabData.AutoGenerateName);

            if (!detailTabData.AutoGenerateName)
            {
                ClearInputAndTypeValue(_txtPackageName, detailTabData.Name);
            }

            SelectSingleValueFromReactDropdownByText(_ddlPublisher, detailTabData.Publisher);
            SelectSingleValueFromReactDropdownByText(_ddlSite, detailTabData.Site);

            if (!string.IsNullOrWhiteSpace(detailTabData.Supplier))
            {
                SelectSingleValueFromReactDropdownByText(_ddlSupplier, detailTabData.Supplier);
            }

            if (string.IsNullOrWhiteSpace(detailTabData.StartDate))
            {
                detailTabData.StartDate = GetTodaysDate();
            }
            else if (detailTabData.StartDate == "dayAfterCurrentDate")
            {
                detailTabData.StartDate = GetFutureDate(GetTodaysDate(), 1, "Days");
            }

            if (string.IsNullOrWhiteSpace(detailTabData.EndDate))
            {
                detailTabData.EndDate = GetFutureDate(detailTabData.StartDate, 3);
            }

            EnterDate(_txtStartDate, detailTabData.StartDate);
            EnterDate(_txtEndDate, detailTabData.EndDate);

            if (!string.IsNullOrWhiteSpace(detailTabData.ClientAgreement))
            {
                SelectSingleValueFromReactDropdownByText(_ddlClientAgreement, detailTabData.ClientAgreement);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.FrequencyCapImpressions))
            {
                ClearInputAndTypeValue(_txtFrequencyCapImpressions, detailTabData.FrequencyCapImpressions);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.FrequencyCapDuration))
            {
                ClearInputAndTypeValue(_txtFrequencyCapDuration, detailTabData.FrequencyCapDuration);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.FrequencyCapInterval))
            {
                SelectSingleValueFromReactDropdownByText(_ddlFrequencyCapInterval, detailTabData.FrequencyCapInterval);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.Currency))
            {
                SelectSingleValueFromReactDropdownByText(_ddlCurrency, detailTabData.Currency);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.ExchangeRate))
            {
                Wait.Until(driver => _txtExchangeRate.GetAttribute("disabled") == null);
                ClearInputAndTypeValue(_txtExchangeRate, detailTabData.ExchangeRate);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.PurchaseType))
            {
                SelectSingleValueFromReactDropdownByText(_ddlPurchaseType, detailTabData.PurchaseType);
            }

            ValidateAutoCalculatedField(detailTabData);
            ValidateReverseCalculateFromNetFields(detailTabData);
        }

        public void EditPerformancePackage(EditData editData)
        {
            WaitForLoaderSpinnerToDisappear();

            if (!string.IsNullOrEmpty(editData.Goal))
            {
                ClearInputAndTypeValue(_txtGoal, editData.Goal);
            }

            if (!string.IsNullOrEmpty(editData.Name))
            {
                SetReactCheckBoxState(_chkIsAutoGeneratedPackageName, false);
                ClearInputAndTypeValue(_txtPackageName, editData.Name);
            }

            TriggerOnBlurForCurrentlySelectedInput();
        }

        public void EditPerformancePackagePlacement(EditData editData)
        {
            WaitForLoaderSpinnerToDisappear();
            SetPlacementsTabData(new PlacementsTabData
            {
                Placements = new List<PlacementData>
                {
                    new PlacementData
                    {
                        PlacementName = editData.Name,
                        AutoGenerateName = false
                    }
                }
            }, true);
        }

        private void SetPlacementsTabData(PlacementsTabData data, bool isReplace = false)
        {
            if (data == null)
                return;

            ScrollAndClickElement(_tabPlacements);
            foreach (var placementData in data.Placements)
            {
                if (!isReplace)
                {
                    ScrollAndClickElement(_btnAddPlacement);
                }

                SetReactCheckBoxState(_chkIsAutoGeneratedPlacementName, placementData.AutoGenerateName);

                if (!placementData.AutoGenerateName)
                {
                    ClearInputAndTypeValue(_txtPlacementName, placementData.PlacementName);
                }

                if (!string.IsNullOrWhiteSpace(placementData.Location))
                {
                    SelectSingleValueFromReactDropdownByText(_ddlLocation, placementData.Location);
                }

                if (!string.IsNullOrWhiteSpace(placementData.Format))
                {
                    SelectSingleValueFromReactDropdownByText(_ddlFormat, placementData.Format);
                }

                if (!string.IsNullOrWhiteSpace(placementData.CreativeType))
                {
                    SelectSingleValueFromReactDropdownByText(_ddlCreativeType, placementData.CreativeType);
                }

                if (!string.IsNullOrWhiteSpace(placementData.Package))
                {
                    SelectSingleValueFromReactDropdownByText(_ddlPackage, placementData.Package);
                }

                if (!string.IsNullOrWhiteSpace(placementData.ShareOfVoice))
                {
                    ClearInputAndTypeValue(_txtSOV, placementData.ShareOfVoice);
                }

                if (placementData.Devices != null && placementData.Devices.Any())
                {
                    SelectMultipleValuesFromReactDropdownByText(_ddlDevices, placementData.Devices);
                }

                if (placementData.CustomFields != null && placementData.CustomFields.Any())
                {
                    foreach (var customFieldData in placementData.CustomFields)
                    {
                        var customFieldElement = FindElementByXPath($"//label[text() = '{customFieldData.Name}']");
                        SetCustomFieldElement(customFieldElement, customFieldData.Type, customFieldData.Values);
                    }
                }

                ScrollAndClickElement(_btnSavePlacement);
            }
        }

        private void EnsureMandatoryValueForAGPackage(PerformancePackage performancePackage)
        {
        }

        private void EnsureMandatoryValuesAreProvided(PerformancePackage data)
        {
            var dataErrorFound = false;
            var dataErrors = new StringBuilder();
            dataErrors.Append("The feature file " + FeatureContext.FeatureInfo.Title + " has the following data issues:");

            if (string.IsNullOrWhiteSpace(data.DetailTabData.Name) && !data.DetailTabData.AutoGenerateName)
            {
                dataErrorFound = true;
                dataErrors.Append("\n- Performance package name not set and IsAutoGenerateName was false");
            }

            if (string.IsNullOrWhiteSpace(data.DetailTabData.Publisher))
            {
                dataErrorFound = true;
                dataErrors.Append("\n- Performance package publisher not set");
            }

            if (string.IsNullOrWhiteSpace(data.DetailTabData.Site))
            {
                dataErrorFound = true;
                dataErrors.Append("\n- Performance package site not set");
            }

            foreach (var placement in data.PlacementsTabData.Placements)
            {
                if (string.IsNullOrWhiteSpace(placement.Location))
                {
                    dataErrorFound = true;
                    dataErrors.Append("\n- Performance Placement location was not set");
                }

                if (string.IsNullOrWhiteSpace(placement.Format))
                {
                    dataErrorFound = true;
                    dataErrors.Append("\n- Performance Placement format was not set");
                }
            }

            if (dataErrorFound)
                throw new ArgumentException(dataErrors.ToString());
        }
    }
}