using System;
using System.Globalization;
using System.Linq;
using System.Text;
using Automation_Framework._3._Pages.Symphony.Common.Enums;
using Automation_Framework.DataModels.CommonData;
using Automation_Framework.DataModels.WorkflowTestData.MediaScheduleItem.Common;
using Automation_Framework.DataModels.WorkflowTestData.MediaScheduleItem.SinglePlacement;
using Automation_Framework.Helpers;
using NUnit.Framework;
using OpenQA.Selenium;
using TechTalk.SpecFlow;

namespace Automation_Framework._3._Pages.Symphony.Agency.Overview.Campaign.MediaSchedule
{
    public class ManageSinglePlacementModal : AddEditModal
    {
        // Detail Tab Links
        private IWebElement _txtPlacementName => FindElementById("placementName");
        private IWebElement _chkIsAutoGeneratedName => FindElementByXPath("//*[@id='autoGenerateName']/..//div");
        private IWebElement _ddlPublisher => FindElementByXPath("//label[text() = 'Publisher']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlSite => FindElementByXPath("//label[text() = 'Site']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlSupplier => FindElementByXPath("//label[text() = 'Supplier']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlLocation => FindElementByXPath("//label[text() = 'Location']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlFormat => FindElementByXPath("//label[text() = 'Format']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtWidth => FindElementByXPath("//label[text() = 'Width']/..//input");
        private IWebElement _txtHeight => FindElementByXPath("//label[text() = 'Height']/..//input");
        private IWebElement _ddlCreativeType => FindElementByXPath("//label[text() = 'Creative Type']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlDevices => FindElementByXPath("//label[text() = 'Devices']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtLandingPage => FindElementByXPath("//label[text() = 'Landing page']/..//input");
        private IWebElement _ddlTargetingType => FindElementByXPath("//label[text() = 'Targeting']/..//..//label[text() = 'Type']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlTargetingOptions => FindElementByXPath("//label[text() = 'Option']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtTargetingComments => FindElementByXPath("//label[text() = 'Targeting Comments']/..//textarea");
        private IWebElement _txtFrequencyCapImpressions => FindElementById("frequencyCapValue");
        private IWebElement _txtFrequencyCapDuration => FindElementById("frequencyCapIntervalValue");
        private IWebElement _ddlFrequencyCapInterval => FindElementByXPath("//label[text() = 'Impressions Per']/../../..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtStartDate => FindElementByXPath("//label[text() = 'Start']/..//input");
        private IWebElement _txtEndDate => FindElementByXPath("//label[text() = 'End']/..//input");
        private IWebElement _ddlClientAgreement => FindElementByXPath("//div[@id='AgencyFeeAgreementField']//div[contains(@class,'select-component__control')]");
        private IWebElement _ddlPurchaseType => FindElementByXPath("//label[text() = 'Type']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _chkBudgetCap => FindElementByXPath("//div[text() = 'Budget Cap']/..//div");
        private IWebElement _txtGoal => FindElementByXPath("//label[contains(text(), 'Goal')]/..//input");
        private IWebElement _txtRatecardRate => FindElementById("RateCardRate");
        private IWebElement _txtBaseRate => FindElementById("BaseRate");
        private IWebElement _txtSov => FindElementByXPath("//label[text() = 'SOV%']/..//input");
        private IWebElement _ddlCurrency => FindElementByXPath("//label[text() = 'Currency']/..//div[contains(@class,'select-component__control')]");
        private IWebElement _txtExchangeRate => FindElementByXPath("//label[text() = 'Exchange Rate']/..//input");

        public ManageSinglePlacementModal(IWebDriver driver, FeatureContext featureContext) : base(driver, featureContext)
        {
        }

        public void CreateSinglePlacement(SinglePlacement singlePlacement, bool isSponsorshipChildItem = false)
        {
            WaitForLoaderSpinnerToDisappear();
            if (singlePlacement.IsAutomatedGuaranteedItem)
            {
                EnsureMandatoryValueForAG(singlePlacement);
                SetDetailTabDataForAg(singlePlacement.DetailTabData);
            }
            else
            {
                EnsureMandatoryValuesAreProvided(singlePlacement, isSponsorshipChildItem);
                SetDetailTabData(singlePlacement.DetailTabData, isSponsorshipChildItem);
            }
            SetClassificationTabData(singlePlacement.ClassificationsTabData);
            SetFlightingTabData(singlePlacement.FlightingTabData);
            SetTrafficTabData(singlePlacement.TrafficTabData);
            SetCostTabData(singlePlacement.CostsTabData);
            SetForecastTabData(singlePlacement.ForecastTabData);
            SetMoreTabData(singlePlacement.MoreTabData);

            var purchaseType = ConvertToPurchaseTypeEnum(singlePlacement.DetailTabData.PurchaseType);
            AddItem(singlePlacement.IsAutomatedGuaranteedItem, purchaseType);

            if (!isSponsorshipChildItem)
            {
                WaitUntilAlertContains("All Done!");
            }
        }

        public void EditSinglePlacement(EditData editData)
        {
            WaitForLoaderSpinnerToDisappear();
            var purchaseType = ConvertToPurchaseTypeEnum(_ddlPurchaseType.Text);

            if (!string.IsNullOrEmpty(editData.Name))
            {
                ClearInputAndTypeValue(_txtPlacementName, editData.Name);
            }

            if (!string.IsNullOrEmpty(editData.Goal) && purchaseType.IsGoalEditableForPurchaseType())
            {
                ClearInputAndTypeValue(_txtGoal, editData.Goal);
            }
            else if (!string.IsNullOrEmpty(editData.Rate))
            {
                ClearInputAndTypeValue(_txtBaseRate, editData.Rate);
            }

            TriggerOnBlurForCurrentlySelectedInput();
        }

        private void SetDetailTabDataForAg(DetailTabData detailTabData)
        {
            SetReactCheckBoxState(_chkIsAutoGeneratedName, detailTabData.AutoGenerateName);

            if (!detailTabData.AutoGenerateName)
            {
                ClearInputAndTypeValue(_txtPlacementName, detailTabData.Name);
            }

            var flightDates = new FlightDates
            {
                StartDate = detailTabData.StartDate,
                EndDate = detailTabData.EndDate
            };

            flightDates = GetActualFlightDates(flightDates);

            EnterDate(_txtStartDate, flightDates.StartDate);
            EnterDate(_txtEndDate, flightDates.EndDate);

            if (ConvertToPurchaseTypeEnum(detailTabData.PurchaseType) == PurchaseType.CPD)
            {
                try
                {
                    Wait.Until(driver => _txtGoal.GetAttribute("value").Replace(",", string.Empty).Contains(detailTabData.Goal));
                }
                catch
                {
                    Assert.Fail($"CPD Goal mismatch.\nExpected: {detailTabData.Goal}\nActual: {_txtGoal.GetAttribute("value").Replace(", ", string.Empty)}");
                }
            }

            if (!string.IsNullOrEmpty(detailTabData.TargetingType))
            {
                ScrollAndClickElement(_ddlTargetingType);
                SelectSingleValueFromReactDropdownByText(_ddlTargetingType, detailTabData.TargetingType);
                ScrollAndClickElement(_ddlTargetingOptions);
                Wait.Until(d => !IsElementPresent(By.XPath("//div[contains(@class,'select-component targeting-options select-component--is-disabled')]")));
                SelectMultipleValuesFromReactDropdownByText(_ddlTargetingOptions, detailTabData.TargetingOptions);
            }

            ValidateAutoCalculatedField(detailTabData);
        }

        private void EnsureMandatoryValueForAG(SinglePlacement singlePlacement)
        {
        }

        private void SetDetailTabData(DetailTabData detailTabData, bool isSponsorshipChildItem)
        {
            ClickTab("Details");
            SetReactCheckBoxState(_chkIsAutoGeneratedName, detailTabData.AutoGenerateName);

            if (!detailTabData.AutoGenerateName)
            {
                ClearInputAndTypeValue(_txtPlacementName, detailTabData.Name);
            }

            if (!isSponsorshipChildItem)
            {
                ClearSelectedValueFromReactDropdown(_ddlPublisher);
                SelectSingleValueFromReactDropdownByText(_ddlPublisher, detailTabData.Publisher);
            }

            ClearSelectedValueFromReactDropdown(_ddlSite);
            SelectSingleValueFromReactDropdownByText(_ddlSite, detailTabData.Site);

            if (!string.IsNullOrWhiteSpace(detailTabData.Supplier))
            {
                SelectSingleValueFromReactDropdownByText(_ddlSupplier, detailTabData.Supplier);
            }

            SelectSingleValueFromReactDropdownByText(_ddlLocation, detailTabData.Location);
            SelectSingleValueFromReactDropdownByText(_ddlFormat, detailTabData.Format);

            //// TODO - Handle Width and Height as we need to additionally check whether element is disabled

            if (!string.IsNullOrWhiteSpace(detailTabData.CreativeType))
            {
                SelectSingleValueFromReactDropdownByText(_ddlCreativeType, detailTabData.CreativeType);
            }

            if (detailTabData.Devices != null && detailTabData.Devices.Any())
            {
                RemoveAllItemsFromMultiSelect(_ddlDevices);
                SelectMultipleValuesFromReactDropdownByText(_ddlDevices, detailTabData.Devices);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.LandingPage))
            {
                ClearInputAndTypeValue(_txtLandingPage, detailTabData.LandingPage);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.TargetingComments))
            {
                ClearInputAndTypeValue(_txtTargetingComments, detailTabData.TargetingComments);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.FrequencyCapImpressions))
            {
                ClearInputAndTypeValue(_txtFrequencyCapImpressions, detailTabData.FrequencyCapImpressions);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.FrequencyCapDuration))
            {
                ClearInputAndTypeValue(_txtFrequencyCapDuration, detailTabData.FrequencyCapDuration);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.FrequencyCapInterval))
            {
                SelectSingleValueFromReactDropdownByText(_ddlFrequencyCapInterval, detailTabData.FrequencyCapInterval);
            }

            if (string.IsNullOrWhiteSpace(detailTabData.StartDate))
            {
                detailTabData.StartDate = GetTodaysDate();
            }
            else if (detailTabData.StartDate == "dayAfterCurrentDate")
            {
                detailTabData.StartDate = GetFutureDate(GetTodaysDate(), 1, "Days");
            }

            if (string.IsNullOrWhiteSpace(detailTabData.EndDate))
            {
                detailTabData.EndDate = GetFutureDate(detailTabData.StartDate, 3);
            }

            EnterDate(_txtStartDate, detailTabData.StartDate);
            EnterDate(_txtEndDate, detailTabData.EndDate);

            var placementStartDate = DateTime.ParseExact(detailTabData.StartDate, "dd MMM yyyy", CultureInfo.InvariantCulture).ToString("yyyyMM");
            FeatureContext.Add(detailTabData.Name, placementStartDate);

            if (!string.IsNullOrWhiteSpace(detailTabData.ClientAgreement))
            {
                SelectSingleValueFromReactDropdownByText(_ddlClientAgreement, detailTabData.ClientAgreement);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.Currency))
            {
                SelectSingleValueFromReactDropdownByText(_ddlCurrency, detailTabData.Currency);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.ExchangeRate))
            {
                Wait.Until(driver => _txtExchangeRate.GetAttribute("disabled") == null);
                ClearInputAndTypeValue(_txtExchangeRate, detailTabData.ExchangeRate);
            }

            if (!string.IsNullOrWhiteSpace(detailTabData.PurchaseType))
            {
                SelectSingleValueFromReactDropdownByText(_ddlPurchaseType, detailTabData.PurchaseType);
            }

            if (detailTabData.IsDefaultRate)
            {
                Assert.AreEqual(_txtBaseRate.GetAttribute("value"), detailTabData.BaseRate);
                Assert.AreEqual(_txtRatecardRate.GetAttribute("value"), detailTabData.RatecardRate);
            }

            ValidateAutoCalculatedField(detailTabData);
            ValidateReverseCalculateFromNetFields(detailTabData);

            if (!string.IsNullOrWhiteSpace(detailTabData.ShareOfVoice))
            {
                ClearInputAndTypeValue(_txtSov, detailTabData.ShareOfVoice);
            }

            if (detailTabData.CustomFields != null && detailTabData.CustomFields.Any())
            {
                foreach (var customFieldData in detailTabData.CustomFields)
                {
                    var customFieldElement = FindElementByXPath($"//label[text() = '{customFieldData.Name}']");
                    SetCustomFieldElement(customFieldElement, customFieldData.Type, customFieldData.Values);
                }
            }
        }

        private void EnsureMandatoryValuesAreProvided(SinglePlacement singlePlacement, bool isSponsorshipChildItem = false)
        {
            var dataErrorFound = false;
            var campaignDataErrors = new StringBuilder();
            campaignDataErrors.Append("The feature file " + FeatureContext.FeatureInfo.Title + " has the following data issues:");

            if (string.IsNullOrWhiteSpace(singlePlacement.DetailTabData.Name) && !singlePlacement.DetailTabData.AutoGenerateName)
            {
                dataErrorFound = true;
                campaignDataErrors.Append("\n- Single Placement name not set and IsAutoGenerateName was false");
            }

            if (string.IsNullOrWhiteSpace(singlePlacement.DetailTabData.Publisher) && !isSponsorshipChildItem)
            {
                dataErrorFound = true;
                campaignDataErrors.Append("\n- Single Placement publisher was not set");
            }

            if (string.IsNullOrWhiteSpace(singlePlacement.DetailTabData.Site))
            {
                dataErrorFound = true;
                campaignDataErrors.Append("\n- Single Placement site was not set");
            }

            if (string.IsNullOrWhiteSpace(singlePlacement.DetailTabData.Location))
            {
                dataErrorFound = true;
                campaignDataErrors.Append("\n- Single Placement location was not set");
            }

            //// TODO - Validate start and end date format?

            if (dataErrorFound)
                throw new ArgumentException(campaignDataErrors.ToString());
        }
    }
}