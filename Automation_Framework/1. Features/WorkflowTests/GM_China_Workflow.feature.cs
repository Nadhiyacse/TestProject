// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Automation_Framework._1_Features.WorkflowTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GM_China_Workflow")]
    [NUnit.Framework.CategoryAttribute("WorkFlowTest")]
    public partial class GM_China_WorkflowFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GM_China_Workflow.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GM_China_Workflow", null, ProgrammingLanguage.CSharp, new string[] {
                        "WorkFlowTest"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
 #line 5
    testRunner.Given("I have logged in as an agency user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN01 Creating the campaign")]
        public virtual void CN01CreatingTheCampaign()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN01 Creating the campaign", ((string[])(null)));
#line 7
 this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 8
    testRunner.When("I create a campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
    testRunner.Then("The campaign should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN02 Import cost items from file")]
        public virtual void CN02ImportCostItemsFromFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN02 Import cost items from file", ((string[])(null)));
#line 11
 this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 12
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
    testRunner.And("I navigate to the Media Schedule page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
    testRunner.And("I import the media schedule items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
    testRunner.Then("The imported cost items should be present in the media schedule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN03 Confirm all items")]
        public virtual void CN03ConfirmAllItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN03 Confirm all items", ((string[])(null)));
#line 17
 this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 18
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
    testRunner.And("I navigate to the Media Schedule page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
    testRunner.And("I confirm all items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN04 Submit IO for Approval")]
        public virtual void CN04SubmitIOForApproval()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN04 Submit IO for Approval", ((string[])(null)));
#line 22
 this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 23
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
    testRunner.And("I create insertion order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
    testRunner.And("I submit Insertion Order for approval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
    testRunner.Then("The insertion order status should be \'Pending Approval (V1)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN05 Approver rejects IO")]
        public virtual void CN05ApproverRejectsIO()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN05 Approver rejects IO", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 31
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
    testRunner.And("I reject submitted insertion order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
    testRunner.Then("The insertion order status should be \'Saved (V1)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN06 Approve Insertion Order")]
        public virtual void CN06ApproveInsertionOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN06 Approve Insertion Order", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 38
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
    testRunner.And("I click the Pending IO status link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
    testRunner.And("I submit Insertion Order for approval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
    testRunner.And("I approve submitted insertion order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
    testRunner.Then("The insertion order status should be \'Part Signed (V1)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN07 Export IO PDF Approved")]
        public virtual void CN07ExportIOPDFApproved()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN07 Export IO PDF Approved", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 47
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
    testRunner.And("I click the Pending IO status link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
    testRunner.And("I export the insertion order export \'IO PDF Export (Approved)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
    testRunner.Then("the insertion order export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN08 Recall Insertion Order")]
        public virtual void CN08RecallInsertionOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN08 Recall Insertion Order", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 54
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
    testRunner.And("I recall the insertion order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
    testRunner.Then("The insertion order status should be \'Saved (V2)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN09 Publisher rejects IO")]
        public virtual void CN09PublisherRejectsIO()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN09 Publisher rejects IO", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 61
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
    testRunner.And("I click the Pending IO status link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
    testRunner.And("I submit Insertion Order for approval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
    testRunner.And("I approve submitted insertion order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
    testRunner.Given("I have logged out the current user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
    testRunner.And("I have logged in as a publisher user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
    testRunner.And("I select my campaign as a publisher user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
    testRunner.When("I reject the insertion order as Publisher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
    testRunner.And("I have logged out the current user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
    testRunner.And("I log in as an agency user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
    testRunner.And("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
    testRunner.Then("The insertion order should no longer appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN10 Insertion order publisher sign off")]
        public virtual void CN10InsertionOrderPublisherSignOff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN10 Insertion order publisher sign off", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 79
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
    testRunner.And("I create insertion order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
    testRunner.And("I submit Insertion Order for approval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
    testRunner.And("I approve submitted insertion order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
    testRunner.And("I export the insertion order export \'IO PDF Export (Approved)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
    testRunner.Then("the insertion order export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
    testRunner.When("I export the insertion order export \'IO PDF Export\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
    testRunner.Then("the insertion order export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
    testRunner.Given("I have logged out the current user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
    testRunner.And("I have logged in as a publisher user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
    testRunner.And("I select my campaign as a publisher user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
    testRunner.When("I sign off the insertion order as Publisher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
    testRunner.And("I navigate to the Insertion Order page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
    testRunner.Then("The insertion order status should be \'DateSignedOff (V1)\' on manage multi IO page" +
                    " for publisher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN11 Billing")]
        public virtual void CN11Billing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN11 Billing", ((string[])(null)));
#line 97
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 98
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
    testRunner.And("I navigate to the Billing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
    testRunner.And("I override the billing allocation method per publisher based on test data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
    testRunner.And("I open the Custom Billing page for the first publisher displayed on the UI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
    testRunner.Then("The totals values per item are as per test data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN12 Billing Export")]
        public virtual void CN12BillingExport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN12 Billing Export", ((string[])(null)));
#line 104
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 105
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
    testRunner.And("I navigate to the Billing page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
    testRunner.And("I export the Billing export \'Minder Packaged Export V3\' with delivery method as \'" +
                    "Download\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
    testRunner.Then("the Billing export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
    testRunner.When("I export the Billing export \'Standard Billing Export\' with delivery method as \'Do" +
                    "wnload\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
    testRunner.Then("the Billing export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
    testRunner.When("I export the Billing export \'Minder Packaged Export V2\' with delivery method as \'" +
                    "Download\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
    testRunner.Then("the Billing export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN13 Trafficking")]
        public virtual void CN13Trafficking()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN13 Trafficking", ((string[])(null)));
#line 114
 this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 115
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
    testRunner.And("I navigate to the Traffic page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
    testRunner.And("I traffic all cost items for all AdServers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN14 Trafficking modified cost items")]
        public virtual void CN14TraffickingModifiedCostItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN14 Trafficking modified cost items", ((string[])(null)));
#line 119
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 120
   testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 121
   testRunner.And("I navigate to the Media Schedule page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
   testRunner.And("I edit all cost items based on test data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
   testRunner.And("I cancel all cost items based on test data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
   testRunner.And("I navigate to the Traffic page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
   testRunner.Then("All cost items should have correct status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
   testRunner.And("I traffic all cost items for all AdServers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN15 Export cost items")]
        public virtual void CN15ExportCostItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN15 Export cost items", ((string[])(null)));
#line 128
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 129
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 130
    testRunner.And("I navigate to the Media Schedule page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
    testRunner.When("I export the media schedule export \'GroupM (CN) Maxus Media Schedule\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
    testRunner.Then("The media schedule export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 133
    testRunner.When("I export the media schedule export \'GroupM (CN) MEC Media Schedule\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 134
    testRunner.Then("The media schedule export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 135
    testRunner.When("I export the media schedule export \'GroupM (CN) MCOM Media Schedule\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
    testRunner.Then("The media schedule export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 137
    testRunner.When("I export the media schedule export \'GroupM (CN) MCOM Volkswagen Media Schedule\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
    testRunner.Then("The media schedule export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 139
    testRunner.When("I export the media schedule export \'GroupM (CN) Mindshare Media Schedule\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 140
    testRunner.Then("The media schedule export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CN18 Download campaign exports")]
        public virtual void CN18DownloadCampaignExports()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CN18 Download campaign exports", ((string[])(null)));
#line 142
this.ScenarioSetup(scenarioInfo);
#line 4
 this.FeatureBackground();
#line 143
    testRunner.When("I select my campaign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
    testRunner.And("I export the campaign export \'Campaign Data Mapping\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
    testRunner.Then("The campaign export should be exported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

